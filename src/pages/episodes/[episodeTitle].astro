---
import { Markdown } from "astro/components";
import MainLayout from "@layouts/MainLayout.astro";
import HeadSEO from "@components/HeadSEO.astro";
import EpisodeLink from "@components/EpisodeLink.astro";
import FinalScores from "@components/FinalScores.astro";
import Character from "@components/Character.astro";
import styles from "@components/FooterLink.module.css";
import slug from "slug";
import { format } from "node:util";

export async function getStaticPaths() {
  const episodes = await Astro.fetchContent("../../episodes/*.md");
  return episodes
    .sort((a, b) => a["episode_number"] - b["episode_number"])
    .map((episode, index, episodes) => {
      const prev = index - 1 >= 0 ? episodes[index - 1] : null;
      const next = episodes.length > index + 1 ? episodes[index + 1] : null;
      return {
        params: { episodeTitle: slug(episode.title) },
        props: { episode, prev, next },
      };
    });
}

const { episodeTitle } = Astro.request.params;
const { episode, prev, next } = Astro.props;
---

<MainLayout class="main-layout">
  <HeadSEO
    slot="head"
    canonicalURL={Astro.request.canonicalURL}
    content={episode} />
  <div class="back-to-episodes">
    <a href={`${Astro.site}#episodes`}>â€¹ Episodes</a>
  </div>
  <h1><EpisodeLink rel="canonical" {episode} /></h1>
  <section class="episode-blurb">
    <blockquote><p>{episode.description}</p></blockquote>
    <div class="roles">
      <div>Host: <Character name={episode.host} /></div>
      <div>
        Presenters: <Character name={episode.presenters[0]} /> & <Character
          name={episode.presenters[1]} />
      </div>
    </div>
  </section>
  {episode.timestamps ? <ul>
    {episode.timestamps.map((timestamp) => <li>this is an episode: {JSON.stringify(timestamp, null, 2)}</li>)}
  </ul>}
  <section class="content">
    <Markdown content={episode.astro.source} />
  </section>
  <div id="episode-next-prev" class="inter-episode-nav">
    <div>
      {prev ? <EpisodeLink rel="prev" episode={prev}>
          Previous Episode:{" "}
        </EpisodeLink> : ""}
    </div>
    <div>
      {next ? <EpisodeLink rel="next" episode={next}>
          Next Episode:{" "}
        </EpisodeLink> : ""}
    </div>
  </div>
  {episode.scores ? <FinalScores scores={episode.scores} /> : ""}
  <Fragment slot="footer">
    <li>
      <a
        class={styles.FooterLink}
        href="https://github.com/jasikpark/unofficial-distractible-scoreboard/"
        >Edit on Github</a>
    </li>
  </Fragment>
</MainLayout>

<style>
  .main-layout {
    font-size: var(--font-size-3);
  }
  .back-to-episodes {
    padding: 1em;
    text-transform: uppercase;
    font-size: var(--font-size-3);
  }
  h1 {
    font-size: var(--font-size-7);
    font-weight: 700;
    margin-inline: auto;
    text-align: center;
    text-transform: uppercase;
    padding: 1em;
  }
  .episode-blurb {
    background-color: var(--color-black);
    color: var(--color-white);

    padding: 1em;
  }
  .episode-blurb blockquote {
    max-width: 50ch;
    margin-inline: auto;
    padding: 1em;
    margin-block: 1em;
    border-left: solid 0.23em hsla(0, 100%, 100%, 17%);
  }
  .roles {
    font-size: var(--font-size-5);

    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1em;
  }
  .inter-episode-nav {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1fr;
    max-width: 70%;
    margin-inline: auto;
    margin-block: 2em;
  }
  .inter-episode-nav :nth-child(2) {
    text-align: right;
  }
  .content {
    padding: 1em;
    max-width: min(50em, 100% - 2em);
    margin-inline: auto;
  }
  .content > * + * {
    padding-top: 1em;
  }
</style>
